<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        new Promise((resolve, reject) => {
            resolve("Success");
        })
        .then((result) => {
            document.write(result,"<br>");
        })
        .catch((error) => {
            document.error(error);
        });

let myPromise = new Promise((resolve, reject) => {
    let success = true;
    if (success) {
        resolve("The operation was successfully");
    } else {
        reject("The operation is failed");
    }
});
myPromise.then((result) => {
    document.write(result,"<br>");
})
.catch((error) => {
    document.write(error);
});


//multi .then promise
let promise = new Promise((resolve, reject) => {
    resolve(5); 
})
.then(result => {
    document.write(result);
    return result * 2;
})
.then(result => {
    document.write(result);
    return result + 3;
})
.then(result => {
    document.write(result);
})
.catch(error => {
    document.write("error", error);
})


//timeout promise
new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve("Promise resolved after 5 seconds");
    }, 5000);
})
.then((result) => {
    document.write(result,"<br>");
})
.catch((error) => {
    document.write(error);
});


    </script>
</body>
</html>

Promises:
A promise is a special javascript object that represents the eventual completion(or failure) of an asynchronous operation.
1)Three states 
2)Pending: the initial state, the promise is still waiting for the operation to finish.
3)Fullfilled: the operation completed successfully.
4)Rejected: the operation failed.
Exp: to create a promise new promise();
The promise constructor takes a function with two parameters:
resolve-- to mark as the promise is successful
reject-- to mark is as failed.
Handling:
.then() method is called when the promise is fulfilled.
It receives the result from the resolve();
.catch() method is called when promise is rejected;
It recieves the result from the reject();
Ex:
Let myPromise = new Promise((resolve,reject)=>{
Let success=true
If(success){
Resolve(“The operation was successfully”)
}else{
Reject(“The operation is failed”)
}
});
myPromise.then(result=>{
Document.write(result)
})
.catch(error=>{
Document.write(error)
})
Chaining promises:
You can have chain multiple .then()
Ex:
Let promise =new Promise((resolve,reject)=>{
Resolve(5);
//initial resolved value is 5
})
Promise.then(result=>{
Document.write(result)
Return result*3
})
.then(result=>{
Document.write(result)
Return result+3;
})
.then(result=>{
Document.write(result)
})
.catch.error=>{
Document.write(“error”,error)
})
Promise with settimeout:
This promise will resolve after certain amount of time.
